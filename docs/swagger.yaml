basePath: /
definitions:
  model.ApiResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: operation completed successfully
        type: string
      type:
        example: success
        type: string
    type: object
  model.Category:
    properties:
      id:
        example: 2
        type: integer
      name:
        example: Dog
        type: string
    type: object
  model.Order:
    properties:
      complete:
        example: false
        type: boolean
      id:
        example: 10
        type: integer
      petId:
        example: 3
        type: integer
      quantity:
        example: 2
        type: integer
      shipDate:
        example: "2025-03-29T15:04:05Z"
        type: string
      status:
        example: placed
        type: string
    type: object
  model.Pet:
    properties:
      category:
        $ref: '#/definitions/model.Category'
      id:
        example: 1
        type: integer
      name:
        example: Rex
        type: string
      photoUrls:
        example:
        - '["https://example.com/photo.jpg"]'
        items:
          type: string
        type: array
      status:
        example: available
        type: string
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
    type: object
  model.Tag:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: cute
        type: string
    type: object
  model.User:
    properties:
      email:
        example: johndoe@example.com
        type: string
      firstName:
        example: John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      password:
        example: secret123
        type: string
      phone:
        example: "+123456789"
        type: string
      userStatus:
        example: 1
        type: integer
      username:
        example: johndoe
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample Petstore server.
  title: Petstore API
  version: "1.0"
paths:
  /pet:
    post:
      consumes:
      - application/json
      parameters:
      - description: Pet to add
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Pet'
      security:
      - ApiKeyAuth: []
      summary: Add a new pet to the store
      tags:
      - pet
    put:
      consumes:
      - application/json
      description: Update an existing pet in the store
      parameters:
      - description: Pet to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Pet'
      security:
      - ApiKeyAuth: []
      summary: Update an existing pet
      tags:
      - pet
  /pet/{petId}:
    delete:
      consumes:
      - application/json
      description: Deletes a pet by ID
      parameters:
      - description: Pet id to delete
        in: path
        name: petId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Deletes a pet
      tags:
      - pet
    get:
      consumes:
      - application/json
      description: Returns a single pet
      parameters:
      - description: ID of pet to return
        in: path
        name: petId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.Pet'
      security:
      - ApiKeyAuth: []
      summary: Find pet by ID
      tags:
      - pet
    post:
      consumes:
      - multipart/form-data
      description: Updates name and status of pet
      parameters:
      - description: ID of pet that needs to be updated
        in: path
        name: petId
        required: true
        type: integer
      - description: Updated name of the pet
        in: formData
        name: name
        type: string
      - description: Updated status of the pet
        in: formData
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.Pet'
      security:
      - ApiKeyAuth: []
      summary: Updates a pet in the store with form data
      tags:
      - pet
  /pet/{petId}/uploadImage:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: ID of pet to update
        in: path
        name: petId
        required: true
        type: integer
      - description: Additional data to pass to server
        in: formData
        name: additionalMetadata
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: uploads an image
      tags:
      - pet
  /pet/findByStatus:
    get:
      consumes:
      - application/json
      description: Multiple status values can be provided with comma separated strings
      parameters:
      - collectionFormat: csv
        description: Status values that need to be considered for filter
        in: query
        items:
          enum:
          - available
          - pending
          - sold
          type: string
        name: status
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/model.Pet'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Finds Pets by status
      tags:
      - pet
  /pet/findByTags:
    get:
      consumes:
      - application/json
      deprecated: true
      description: Multiple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      parameters:
      - collectionFormat: csv
        description: Tags to filter by
        in: query
        items:
          type: string
        name: tags
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/model.Pet'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Finds Pets by tags
      tags:
      - pet
  /store/inventory:
    get:
      consumes:
      - application/json
      description: Returns a map of status codes to quantities
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            additionalProperties:
              type: integer
            type: object
      security:
      - ApiKeyAuth: []
      summary: Returns pet inventories by status
      tags:
      - store
  /store/order:
    post:
      consumes:
      - application/json
      description: Places a new order in the system
      parameters:
      - description: order placed for purchasing the pet
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Order'
      summary: Place an order for a pet
      tags:
      - store
  /store/order/{orderId}:
    delete:
      consumes:
      - application/json
      description: For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      parameters:
      - description: ID of the order that needs to be deleted
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Delete purchase order by ID
      tags:
      - store
    get:
      consumes:
      - application/json
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generate exceptions
      parameters:
      - description: ID of pet that needs to be fetched
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Order'
      summary: Find purchase order by ID
      tags:
      - store
  /user:
    post:
      consumes:
      - application/json
      description: This can only be done by the logged in user.
      parameters:
      - description: Created user object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Create user
      tags:
      - user
  /user/{username}:
    delete:
      consumes:
      - application/json
      description: This can only be done by the logged in user.
      parameters:
      - description: The name that needs to be deleted
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Delete user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: The name that needs to be fetched. Use user1 for testing.
      parameters:
      - description: The name that needs to be fetched
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.User'
      summary: Get user by user name
      tags:
      - user
    put:
      consumes:
      - application/json
      description: This can only be done by the logged in user.
      parameters:
      - description: name that need to be updated
        in: path
        name: username
        required: true
        type: string
      - description: Updated user object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.User'
      summary: Updated user
      tags:
      - user
  /user/createWithArray:
    post:
      consumes:
      - application/json
      description: Creates list of users with given input array
      parameters:
      - description: List of user object
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/model.User'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Creates list of users with given input array
      tags:
      - user
  /user/createWithList:
    post:
      consumes:
      - application/json
      description: Creates list of users with given input array
      parameters:
      - description: List of user object
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/model.User'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Creates list of users with given input array
      tags:
      - user
  /user/login:
    get:
      consumes:
      - application/json
      description: Logs user into the system
      parameters:
      - description: The user name for login
        in: query
        name: username
        required: true
        type: string
      - description: The password for login in clear text
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
      summary: Logs user into the system
      tags:
      - user
  /user/logout:
    get:
      consumes:
      - application/json
      description: Logs out current logged in user session
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Logs out current logged in user session
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
